# Ultralytics YOLO 🚀, AGPL-3.0 license
# YOLOv5 object detection model with P3-P6 outputs. For details see https://docs.ultralytics.com/models/yolov5

# Parameters
nc: 2 # number of classes 80 -> 2 edit
names: ['fire', 'smoke'] # adds

scales: # model compound scaling constants, 'model=yolov5n-p6.yaml' will call yolov5-p6.yaml with scale 'n', 제일 속도를 위해 nano version select
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024]
  # s: [0.33, 0.50, 1024]
  # m: [0.67, 0.75, 1024]
  # l: [1.00, 1.00, 1024]
  # x: [1.33, 1.25, 1024]

# YOLOv5 v6.0 backbone
# input : (H, W); 입력 사이즈
# filter size = (FH, FW); Sliding하는 window size
# output : (OH, OW); 출력 사이즈
# padding : P; padding size
# stride : S; window step

# OH = H + 2P - FH / S +1
# OW = H + 2P - FW / S +1

# model 성능 보고 head로 넘어가는 이미지 size yolov5처럼 1024가 아닌 640으로 넘겨주고 output 640으로 나오게 값 수정
backbone:
  # [from, number, module, args]
  # [F, K(kernel), S(stride) P(padding)]
  # train data set 640by640 * 3(rgb)

  # Stem Layer 
  - [-1, 1, Conv, [64, 6, 2, 2]] # 0-P1/2s # Output 320by320으로 만들어줌 
  
  # Stage Layer 1
  - [-1, 1, Conv, [128, 3, 2]] # 1-P2/4 # 160by160d으로 변경 
  - [-1, 3, C3, [128]] # CSPlayer
  
  # Stage Layer 2, TopDown Layer1
  - [-1, 1, Conv, [256, 3, 2]] # 3-P3/8
  - [-1, 6, C3, [256]] # CSPlayer

  # Stage Layer 3
  - [-1, 1, Conv, [512, 3, 2]] # 5-P4/16
  - [-1, 9, C3, [512]] # CSPlayer

  # Stage Layer 4; YOLOv5p6의 경우 YOLOv5와 다르게 Layer 층 하나 더 있음
  - [-1, 1, Conv, [768, 3, 2]] # 7-P5/32
  - [-1, 3, C3, [768]] # CSPlayer

  # Stage Layer 5
  - [-1, 1, Conv, [1024, 3, 2]] # 9-P6/64
  - [-1, 3, C3, [1024]] # CSPlayer
  - [-1, 1, SPPF, [1024, 5]] # 11

# YOLOv5 v6.0 head
# 모델 fps 떨어지면 head의 Layer delete해서 최적화 진행  

head:
  - [-1, 1, Conv, [768, 1, 1]]
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] # nearest(최근접 이웃)으로 업샘플링
  - [[-1, 8], 1, Concat, [1]] # cat backbone P5 # Concat으로 Conv 묶어줌
  - [-1, 3, C3, [768, False]] # 15

  - [-1, 1, Conv, [512, 1, 1]]
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] # nearest(최근접 이웃)으로 업샘플링
  - [[-1, 6], 1, Concat, [1]] # cat backbone P4 # Concat으로 Conv 묶어줌
  - [-1, 3, C3, [512, False]] # 19

  - [-1, 1, Conv, [256, 1, 1]]
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] # nearest(최근접 이웃)으로 업샘플링
  - [[-1, 4], 1, Concat, [1]] # cat backbone P3 # Concat으로 Conv 묶어줌
  - [-1, 3, C3, [256, False]] # 23 (P3/8-small)

  - [-1, 1, Conv, [256, 3, 2]]
  - [[-1, 20], 1, Concat, [1]] # cat head P4 # Concat으로 Conv 묶어줌
  - [-1, 3, C3, [512, False]] # 26 (P4/16-medium)

  - [-1, 1, Conv, [512, 3, 2]]
  - [[-1, 16], 1, Concat, [1]] # cat head P5 # Concat으로 Conv 묶어줌
  - [-1, 3, C3, [768, False]] # 29 (P5/32-large)

  - [-1, 1, Conv, [768, 3, 2]] # 최적화시 Layer_32 delete and Layer_29 final edit
  - [[-1, 12], 1, Concat, [1]] # cat head P6 # Concat으로 Conv 묶어줌 
  - [-1, 3, C3, [1024, False]] # 32 (P6/64-xlarge)

  - [[23, 26, 29, 32], 1, Detect, [nc]] # Detect(P3, P4, P5, P6)
